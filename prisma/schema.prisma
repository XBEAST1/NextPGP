datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  // Vault relationship
  vaults        Vault[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Vault {
  id                 String    @id @default(cuid())
  name               String
  verificationCipher String
  userId             String    @unique
  deleteOtp          String?
  otpExpiresAt       DateTime?
  lastActivity       DateTime? @default(now())
  createdAt          DateTime  @default(now())

  // Relations
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  pgpKeys PGPKeys[]
}

model PGPKeys {
  id             String   @id @default(cuid())
  publicKey      String?
  privateKey     String?
  privateKeyHash String?  @unique
  publicKeyHash  String?  @unique
  vaultId        String
  createdAt      DateTime @default(now())

  // Relations
  vault Vault @relation(fields: [vaultId], references: [id], onDelete: Cascade)
}

model IPRateLimit {
  id          String   @id @default(cuid())
  ip          String   @unique
  count       Int      @default(1)
  resetTime   DateTime
  lastRequest DateTime @default(now())
  createdAt   DateTime @default(now())

  @@index([resetTime])
}

model UserRateLimit {
  id          String   @id @default(cuid())
  userId      String
  endpoint    String   @default("default")
  count       Int      @default(1)
  windowStart DateTime @default(now())
  createdAt   DateTime @default(now())

  @@unique([userId, endpoint, windowStart])
  @@index([windowStart])
}
